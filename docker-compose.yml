services:
  crawler:
    build:
      context: .
      dockerfile: Dockerfile.crawler
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  rabbitmq:
    container_name: rabbitmq-container
    image: rabbitmq:3.9-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data-dev:/var/lib/rabbitmq
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 10s
      retries: 3

  kestra:
    image: kestra/kestra:latest-full
    user: root
    ports:
      - "8080:8080"
    environment:
      - KESTRA_QUEUE_TYPE=amqp
      - KESTRA_QUEUES_AMQP_URL=amqp://admin:admin@rabbitmq:5672
      - KESTRA_REPOSITORY_TYPE=filesystem
      - KESTRA_REPOSITORY_FILESYSTEM_BASEPATH=/app/flows
      - KESTRA_SERVER_MODE=grpc
      - KESTRA_UI_ENABLED=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp:/tmp
    command: ["server", "local"]
    depends_on:
      - rabbitmq
      - crawler
    restart: unless-stopped

  app:
    build:
      context: ./app
      dockerfile: Dockerfile.app
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/crawler
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    depends_on:
      - postgres
      - rabbitmq
      - crawler
    restart: unless-stopped

  postgres:
    image: postgres:16.3
    environment:
      - POSTGRES_DB=crawler
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data2:/var/lib/postgresql/data
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-provisioning:/etc/grafana/provisioning
      - ./dashboard.json:/var/lib/grafana/dashboards/dashboard.json
    depends_on:
      - postgres
      - app
    restart: unless-stopped

volumes:
  rabbitmq-data-dev:
  postgres-data2:
  grafana-data:
